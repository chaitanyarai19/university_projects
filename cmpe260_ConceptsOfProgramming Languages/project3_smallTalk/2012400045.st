Object subclass: #Dota	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Dota commentStamp: 'ozmenbrn 5/18/2017 18:13' prior: 0!The of the classes.!Dota subclass: #GameArena	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!GameArena commentStamp: 'ozmenbrn 5/18/2017 17:42' prior: 0!This class contains the main method which starts the game with typing playground "GameArena start." . Detailed explanation of start method is written inside of it.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameArena class	instanceVariableNames: ''!!GameArena class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/19/2017 13:20'!start "This method is the main of the game. The hero selection, buying items etc. and the turn-based game is implemented in this method."|scourgeList sentinelList itemList chosenItem firstPlayerChoice secondPlayerChoice firstPlayer secondPlayer playerMoney remainingItemSlot firstPlayerHealthPotionNum firstPlayerManaPotionNum secondPlayerHealthPotionNum secondPlayerManaPotionNum firstPlayerAttackList secondPlayerAttackList winner|"Variables are initialized."firstPlayerHealthPotionNum := 0. firstPlayerManaPotionNum:= 0. secondPlayerHealthPotionNum := 0. secondPlayerManaPotionNum := 0.playerMoney := 11000. remainingItemSlot := 4.scourgeList := #('Skeleton King' 'Tidehunter' 'Leshrac' 'Mortred' 'Nyx Assassin' 'Lion').sentinelList := #('Magina' 'Ogre Magi' 'Earthsaker' 'Mirana' 'Rylai' 'Sven').itemList := #('Battle Fury - 4500' 'Butterfly - 5500' 'Daedalus - 5500' 'Desolator - 4000' 'Energy Booster - 1100' 'Health Potion - 200' 'Hearth of Tarrasque - 5600' 'Hood of Defiance - 2000' 'Mana Potion - 200' 'Vanguard - 2500' 'Vitality Booster - 1200' 'Proceed(Done with the choosing item)')."First player chooses hero and by choosing a hero 2 skill which they own are initialized with following choice."firstPlayerChoice := UIManager default chooseFrom: scourgeList message: 'Choose a hero from Scourge list for Player 1'.firstPlayerChoice = 1ifTrue:[firstPlayer := SkeletonKing createNewHeroInstance. firstPlayer setSkillList: (WraithfireBlast createNewSkill). firstPlayer setSkillList: (VampiricAura createNewSkill). firstPlayer setHeroName: 'Skeleton King'.] ifFalse:[firstPlayerChoice = 2ifTrue:[firstPlayer := Tidehunter createNewHeroInstance. firstPlayer setSkillList: (AnchorSmash createNewSkill). firstPlayer setSkillList: (Ravage createNewSkill). firstPlayer setHeroName: 'Tidehunter'.] ifFalse:[firstPlayerChoice = 3ifTrue:[firstPlayer := Leshrac createNewHeroInstance. firstPlayer setSkillList: (SplitEarth createNewSkill). firstPlayer setSkillList: (PulseNova createNewSkill). firstPlayer setHeroName: 'Leshrac'.] ifFalse:[firstPlayerChoice = 4ifTrue:[firstPlayer := Mortred createNewHeroInstance. firstPlayer setSkillList: (Blur createNewSkill). firstPlayer setSkillList: (CoupdeGrace createNewSkill). firstPlayer setHeroName: 'Mortred'.] ifFalse:[firstPlayerChoice = 5ifTrue:[firstPlayer := NyxAssassin createNewHeroInstance. firstPlayer setSkillList: (Impale createNewSkill). firstPlayer setSkillList: (ManaBurn createNewSkill). firstPlayer setHeroName: 'Nyx Assasian'.] ifFalse:[firstPlayer := Lion createNewHeroInstance. firstPlayer setSkillList: (EarthSpike createNewSkill). firstPlayer setSkillList: (FingerofDeath createNewSkill). firstPlayer setHeroName: 'Lion'.]			.]		.]	]..]."Second player chooses hero and by choosing a hero 2 skill which they own are initialized with following choice."secondPlayerChoice := UIManager default chooseFrom: sentinelList message: 'Choose a hero from Sentinel list for Player 2'.secondPlayerChoice = 1ifTrue:[secondPlayer := Magina createNewHeroInstance. secondPlayer setSkillList: (ManaBreak createNewSkill). secondPlayer setSkillList: (ManaVoid createNewSkill). secondPlayer setHeroName: 'Magina'.] ifFalse:[secondPlayerChoice = 2ifTrue:[secondPlayer := OgreMagi createNewHeroInstance. secondPlayer setSkillList: (Fireblast createNewSkill). secondPlayer setSkillList: (Multicast createNewSkill). secondPlayer setHeroName: 'Ogre Magi'.] ifFalse:[secondPlayerChoice = 3ifTrue:[secondPlayer := Earthshaker createNewHeroInstance. secondPlayer setSkillList: (Fissure createNewSkill). secondPlayer setSkillList: (EnchantTotem createNewSkill). secondPlayer setHeroName: 'Earthshaker'.]ifFalse:[secondPlayerChoice = 4ifTrue:[secondPlayer := Mirana createNewHeroInstance. secondPlayer setSkillList: (Starstorm createNewSkill). secondPlayer setSkillList: (SacredArrow createNewSkill). secondPlayer setHeroName: 'Mirana'.] ifFalse:[secondPlayerChoice = 5ifTrue:[secondPlayer := Rylai createNewHeroInstance. secondPlayer setSkillList: (FrostBite createNewSkill). secondPlayer setSkillList: (FreezingField createNewSkill). secondPlayer setHeroName: 'Rylai'.] ifFalse:[secondPlayer := Sven createNewHeroInstance . secondPlayer setSkillList: (StormHammer createNewSkill). secondPlayer setSkillList: (GodsStrength createNewSkill). secondPlayer setHeroName: 'Sven'.]			.]		.]	]..]."FirstPlayer choses item while having money and item slot. If item is chosable the item is initialized under firstPlayer object. If don't have enough money or item slot, Selection screen whill popup again with nothing changed. And Also, due to mana and health are differ from other items. There must be variable which keeps potion numbers to get the best result. 2 health = 1 item slot, 3 health = 2 item slots. "[(playerMoney >= 200) & (remainingItemSlot >0)]whileTrue:[chosenItem := UIManager default chooseFrom: itemList message: 'Choose an Item for Player 1(remaining item slot = ',(remainingItemSlot asString),' ,remaining Gold = ',(playerMoney asString),')'.chosenItem = 12 ifTrue:[playerMoney := 0.] ifFalse:[.].chosenItem = 1ifTrue:[playerMoney>=4500 ifTrue:[firstPlayer setItemList: (BattleFury createNewItem). playerMoney :=playerMoney -4500. remainingItemSlot :=remainingItemSlot -1.] ifFalse:[.].] ifFalse:[chosenItem = 2	ifTrue:[playerMoney>=5500 ifTrue:[firstPlayer setItemList: (ButterFly createNewItem). playerMoney :=playerMoney -5500. remainingItemSlot :=remainingItemSlot-1.] ifFalse:[.].] ifFalse:[chosenItem = 3	ifTrue:[playerMoney>=5500 ifTrue:[firstPlayer setItemList: (Daedalus createNewItem). playerMoney :=playerMoney -5500. remainingItemSlot :=remainingItemSlot-1.] ifFalse:[.].] ifFalse:[chosenItem = 4	ifTrue:[playerMoney >= 4000 ifTrue:[firstPlayer setItemList: (Desolator createNewItem). playerMoney :=playerMoney -4000. remainingItemSlot :=remainingItemSlot-1. secondPlayer setArmor: ((secondPlayer getArmor) - 5 ).] ifFalse:[.].] ifFalse:[chosenItem = 5	ifTrue:[playerMoney >=1100 ifTrue:[firstPlayer setItemList: (EnergyBooster createNewItem). playerMoney :=playerMoney-1100.remainingItemSlot:=remainingItemSlot-1. firstPlayer setMaxMana: ((firstPlayer getMaxMana) + 250). firstPlayer setMana: (firstPlayer getMaxMana).] ifFalse:[.].] ifFalse:[chosenItem = 6 	ifTrue:[playerMoney >=200 ifTrue:[ ((firstPlayerHealthPotionNum = 0)|(firstPlayerHealthPotionNum =2 ) |(firstPlayerHealthPotionNum =4)|(firstPlayerHealthPotionNum =6) )ifTrue:[ firstPlayer setItemList: (HealthPotion createNewItem).playerMoney :=playerMoney -200. remainingItemSlot :=remainingItemSlot-1. firstPlayerHealthPotionNum := firstPlayerHealthPotionNum +1.] ifFalse:[ playerMoney := playerMoney - 200. firstPlayerHealthPotionNum := firstPlayerHealthPotionNum + 1 .]  .] ifFalse:[.].] 	ifFalse:[chosenItem = 7	ifTrue:[playerMoney >=5600 ifTrue:[firstPlayer setItemList: (HeartofTarrasque createNewItem).playerMoney:=playerMoney-5600. remainingItemSlot:=remainingItemSlot-1. firstPlayer setMaxHP: ((firstPlayer getMaxHP) + 250). firstPlayer setHP: (firstPlayer getMaxHP).] ifFalse:[.].] ifFalse:[chosenItem = 8	ifTrue:[playerMoney >=2000 ifTrue:[firstPlayer setItemList: (DefianceOfHood createNewItem).playerMoney :=playerMoney -2000. remainingItemSlot :=remainingItemSlot-1.] ifFalse:[.].] ifFalse:[chosenItem = 9	ifTrue:[playerMoney >=200 ifTrue:[((firstPlayerManaPotionNum = 0)|(firstPlayerManaPotionNum = 2)|(firstPlayerManaPotionNum = 4)|(firstPlayerManaPotionNum=6) )ifTrue:[ firstPlayer setItemList: (ManaPotion createNewItem).playerMoney :=playerMoney -200. remainingItemSlot :=remainingItemSlot-1. firstPlayerManaPotionNum := firstPlayerManaPotionNum+1.] ifFalse:[ playerMoney := playerMoney - 200. firstPlayerManaPotionNum:= firstPlayerManaPotionNum + 1 .]  .] ifFalse:[.].] 	ifFalse:[chosenItem = 10	ifTrue:[playerMoney >=2500 ifTrue:[firstPlayer setItemList: (Vanguard createNewItem).playerMoney :=playerMoney -2500. remainingItemSlot :=remainingItemSlot-1. firstPlayer setMaxHP: ((firstPlayer getMaxHP) + 250). firstPlayer setHP: (firstPlayer getMaxHP).] ifFalse:[.].] ifFalse:[playerMoney >=1200 ifTrue:[firstPlayer setItemList: (VitalyBooster createNewItem).playerMoney :=playerMoney -1200. remainingItemSlot :=remainingItemSlot-1. firstPlayer setMaxHP: ((firstPlayer getMaxHP) + 250). firstPlayer setHP: (firstPlayer getMaxHP).] ifFalse:[.].]								.]							.]						.] 					.]				.]				.]		.]	]..].]."This is the case that when 1 health potion buyed and 3 other items. That means you can only buy 1 health potion more if you want."[(playerMoney >= 200) & (remainingItemSlot =0) & ((firstPlayerHealthPotionNum%2 = 1) | (firstPlayerManaPotionNum%2 = 1))]whileTrue:[chosenItem := UIManager default chooseFrom: itemList message: 'Choose an Item for Player 1(remaining item slot = ',(remainingItemSlot asString),' ,remaining Gold = ',(playerMoney asString),')'.chosenItem = 12 ifTrue:[playerMoney := 0.] ifFalse:[.].chosenItem = 6 ifTrue:[firstPlayerHealthPotionNum %2 = 1 ifTrue:[playerMoney := playerMoney - 200. firstPlayerHealthPotionNum := firstPlayerHealthPotionNum + 1.] ifFalse:[.].] ifFalse:[.].chosenItem = 9ifTrue:[firstPlayerManaPotionNum %2 = 1 ifTrue:[playerMoney := playerMoney - 200. firstPlayerManaPotionNum:= firstPlayerManaPotionNum + 1.] ifFalse:[.].] ifFalse:[.].]."SecondPlayer choses item while having money and item slot. If item is chosable the item is initialized under firstPlayer object. If don't have enough money or item slot, Selection screen whill popup again with nothing changed. And Also, due to mana and health are differ from other items. There must be variable which keeps potion numbers to get the best result. 2 health = 1 item slot, 3 health = 2 item slots. "playerMoney := 11000. remainingItemSlot :=4.[(playerMoney >= 200) & (remainingItemSlot >0)]whileTrue:[chosenItem := UIManager default chooseFrom: itemList message: 'Choose an Item for Player 2(remaining item slot = ',(remainingItemSlot asString),' ,remaining Gold = ',(playerMoney asString),')'.chosenItem = 12 ifTrue:[playerMoney := 0.] ifFalse:[.].chosenItem = 1ifTrue:[playerMoney>=4500 ifTrue:[secondPlayer setItemList: (BattleFury createNewItem). playerMoney :=playerMoney -4500. remainingItemSlot :=remainingItemSlot -1.] ifFalse:[.].] ifFalse:[chosenItem = 2	ifTrue:[playerMoney>=5500 ifTrue:[secondPlayer setItemList: (ButterFly createNewItem). playerMoney :=playerMoney -5500. remainingItemSlot :=remainingItemSlot-1.] ifFalse:[.].] ifFalse:[chosenItem = 3	ifTrue:[playerMoney>=5500 ifTrue:[secondPlayer setItemList: (Daedalus createNewItem). playerMoney :=playerMoney -5500. remainingItemSlot :=remainingItemSlot-1.] ifFalse:[.].] ifFalse:[chosenItem = 4	ifTrue:[playerMoney >= 4000 ifTrue:[secondPlayer setItemList: (Desolator createNewItem). playerMoney :=playerMoney -4000. remainingItemSlot :=remainingItemSlot-1. firstPlayer setArmor: ((firstPlayer getArmor) - 5 ).] ifFalse:[.].] ifFalse:[chosenItem = 5	ifTrue:[playerMoney >=1100 ifTrue:[secondPlayer setItemList: (EnergyBooster createNewItem). playerMoney :=playerMoney-1100.remainingItemSlot:=remainingItemSlot-1. secondPlayer setMaxMana: ((secondPlayer getMaxMana) + 250). secondPlayer setMana: (secondPlayer getMaxMana).] ifFalse:[.].] ifFalse:[chosenItem = 6 	ifTrue:[playerMoney >=200 ifTrue:[ ((secondPlayerHealthPotionNum = 0)|(secondPlayerHealthPotionNum = 2)|(secondPlayerHealthPotionNum = 4)|(secondPlayerHealthPotionNum=6) ) ifTrue:[ secondPlayer setItemList: (HealthPotion createNewItem).playerMoney :=playerMoney -200. remainingItemSlot :=remainingItemSlot-1. secondPlayerHealthPotionNum := secondPlayerHealthPotionNum +1.] ifFalse:[ playerMoney := playerMoney - 200. secondPlayerHealthPotionNum := secondPlayerHealthPotionNum + 1 .]  .] ifFalse:[.].] 	ifFalse:[chosenItem = 7	ifTrue:[playerMoney >=5600 ifTrue:[secondPlayer setItemList: (HeartofTarrasque createNewItem).playerMoney:=playerMoney-5600. remainingItemSlot:=remainingItemSlot-1. secondPlayer setMaxHP: ((secondPlayer getMaxHP) + 250). secondPlayer setHP: (secondPlayer getMaxHP).] ifFalse:[.].] ifFalse:[chosenItem = 8	ifTrue:[playerMoney >=2000 ifTrue:[secondPlayer setItemList: (DefianceOfHood createNewItem).playerMoney :=playerMoney -2000. remainingItemSlot :=remainingItemSlot-1.] ifFalse:[.].] ifFalse:[chosenItem = 9	ifTrue:[playerMoney >=200 ifTrue:[((secondPlayerManaPotionNum = 0)|(secondPlayerManaPotionNum = 2)|(secondPlayerManaPotionNum = 4)|(secondPlayerManaPotionNum =6 )) 			ifTrue:[ secondPlayer setItemList: (ManaPotion createNewItem).playerMoney :=playerMoney -200. remainingItemSlot :=remainingItemSlot-1. secondPlayerManaPotionNum := secondPlayerManaPotionNum+1.] ifFalse:[ playerMoney := playerMoney - 200. secondPlayerManaPotionNum := secondPlayerManaPotionNum + 1 .]  .] ifFalse:[.].] 	ifFalse:[chosenItem = 10	ifTrue:[playerMoney >=2500 ifTrue:[secondPlayer setItemList: (Vanguard createNewItem).playerMoney :=playerMoney -2500. remainingItemSlot :=remainingItemSlot-1. secondPlayer setMaxHP: ((secondPlayer getMaxHP) + 250). secondPlayer setHP: (secondPlayer getMaxHP).] ifFalse:[.].] ifFalse:[playerMoney >=1200 ifTrue:[secondPlayer setItemList: (VitalyBooster createNewItem).playerMoney :=playerMoney -1200. remainingItemSlot :=remainingItemSlot-1. secondPlayer setMaxHP: ((secondPlayer getMaxHP) + 250). secondPlayer setHP: (secondPlayer getMaxHP).] ifFalse:[.].]								.]							.]						.] 					.]				.]				.]		.]	]..].]."This is the case that when 1 health potion buyed and 3 other items. That means you can only buy 1 health potion more if you want."[(playerMoney >= 200) & (remainingItemSlot =0) & ((secondPlayerHealthPotionNum %2 = 1) | (secondPlayerManaPotionNum %2 = 1))]whileTrue:[chosenItem := UIManager default chooseFrom: itemList message: 'Choose an Item for Player 2(remaining item slot = ',(remainingItemSlot asString),' ,remaining Gold = ',(playerMoney asString),')'.chosenItem = 12 ifTrue:[playerMoney := 0.] ifFalse:[.].chosenItem = 6 ifTrue:[secondPlayerHealthPotionNum %2 = 1 ifTrue:[playerMoney := playerMoney - 200. secondPlayerHealthPotionNum := secondPlayerHealthPotionNum + 1.] ifFalse:[.].] ifFalse:[.].chosenItem = 9ifTrue:[secondPlayerManaPotionNum %2 = 1 ifTrue:[playerMoney := playerMoney - 200. secondPlayerManaPotionNum := secondPlayerManaPotionNum + 1.] ifFalse:[.].] ifFalse:[.].]."Again variables are initialized for the next part."firstPlayerAttackList := #('Attack' 'Use Health Potion' 'Use Mana Potion'). firstPlayerAttackList := firstPlayerAttackList, {(firstPlayer getSkillList at:1) }, {(firstPlayer getSkillList at:2)} , {('Surrender')}.secondPlayerAttackList := #('Attack' 'Use Health Potion' 'Use Mana Potion'). secondPlayerAttackList := secondPlayerAttackList, { (secondPlayer getSkillList at:1) }, {(secondPlayer getSkillList at:2)} , {('Surrender')}.firstPlayer setPlayerTurn: 1.firstPlayer setHealthPotionNum: firstPlayerHealthPotionNum.  firstPlayer setManaPotionNum: firstPlayerManaPotionNum.secondPlayer setHealthPotionNum: secondPlayerHealthPotionNum. secondPlayer setManaPotionNum: secondPlayerManaPotionNum.firstPlayer setLastAction: 'None'.secondPlayer setLastAction: 'None'."So far, we have chosen our heroes and buy items for them, now it is turn to play the game. While noone will die or surrender, these variables are shown in the transcript. These variables are all wellWritten and can be understand easily."Transcript clear. Transcript open.[((firstPlayer getHP) > 0) & ((secondPlayer getHP) > 0)]whileTrue: [Transcript show: (firstPlayer getPlayerTurn asString);cr;cr;cr; show:'Player1';cr; show:('Hero: ',(firstPlayer getHeroName));cr;show:(firstPlayer getHP asString ,' / ', firstPlayer getMaxHP asString ,' HP');cr;show:(firstPlayer getMana asString, ' / ', firstPlayer getMaxMana asString , ' Mana');cr;show:('Last Action: ', firstPlayer getLastAction );cr;show:('Remaining Potions: ');show:(firstPlayer getPotionList asString);cr;show:('Skills in Cooldown: ' ,firstPlayer getSkillsInCooldown asString);cr;cr;cr;	show:'Player2';cr; show:('Hero: ',(secondPlayer getHeroName));cr;show:(secondPlayer getHP asString ,' / ', secondPlayer getMaxHP asString ,' HP');cr;show:(secondPlayer getMana asString, ' / ', secondPlayer getMaxMana asString , ' Mana');cr;show:('Last Action: ', secondPlayer getLastAction );cr;show:('Remaining Potions: ');show:(secondPlayer getPotionList asString);cr;show:('Skills in Cooldown: ' ,secondPlayer getSkillsInCooldown asString) . 	"FirstPlayer Turn. He can choose 5 different move. But, if his skills are passive or in cooldown he cannot use it and the same screen for player 1 will popup again. If attack is chosen SecondPlayer object wil send to the damageCalculation method in Hero class. This method calculate the damage, rreturn it. If he choses health heltah potion num will decrease and his health will increase 250 if there is space, else it will max the hp of the hero. Again in skill part it  calls activateSkill methods in Hero class and make the calculations and effects."		firstPlayer getPlayerTurn = 'Player1 turn!!' 	ifTrue:[ (firstPlayer setPlayerTurn: 2). chosenItem := UIManager default chooseFrom: firstPlayerAttackList message: 'Player 1 turn ',(firstPlayer getHeroName asString). 	chosenItem = 1 ifTrue:[secondPlayer setHP: ((secondPlayer getHP) - (firstPlayer damageCalculation: secondPlayer) asInteger). firstPlayer itemRoundEffect: secondPlayer .] 	ifFalse:[ chosenItem = 2 		ifTrue:[firstPlayerHealthPotionNum >0 ifTrue:[((firstPlayer getMaxHP)-(firstPlayer getHP))>=300 ifTrue:[firstPlayer setHP: ((firstPlayer getHP) + 300).] ifFalse:[ firstPlayer setHP: (firstPlayer getMaxHP).]. firstPlayerHealthPotionNum := firstPlayerHealthPotionNum -1. firstPlayer setHealthPotionNum: firstPlayerHealthPotionNum . firstPlayer itemRoundEffect: secondPlayer.] ifFalse:[(firstPlayer setPlayerTurn: 1).] .] ifFalse:[chosenItem = 3   		ifTrue:[firstPlayerManaPotionNum > 0  ifTrue:[((firstPlayer getMaxMana)-(firstPlayer getMana))>=300 ifTrue:[firstPlayer setMana: ((firstPlayer getMana) + 300).] ifFalse:[ firstPlayer setMana: (firstPlayer getMaxMana).].firstPlayerManaPotionNum := firstPlayerManaPotionNum -1 . firstPlayer setManaPotionNum: firstPlayerManaPotionNum .  firstPlayer itemRoundEffect: secondPlayer .] ifFalse:[(firstPlayer setPlayerTurn: 1).] .]  ifFalse:[ chosenItem = 4 		ifTrue:[(firstPlayer getSkillUsable: (firstPlayer getSkillList at:1)) = 1 ifTrue:[firstPlayer activateSkill1: secondPlayer. firstPlayer itemRoundEffect: secondPlayer .] ifFalse:[(firstPlayer setPlayerTurn: 1).].] ifFalse:[ chosenItem = 5 		ifTrue:[(firstPlayer getSkillUsable: (firstPlayer getSkillList at:2)) = 1 ifTrue:[firstPlayer activateSkill2: secondPlayer. firstPlayer itemRoundEffect: secondPlayer .] ifFalse:[(firstPlayer setPlayerTurn: 1).].] ifFalse:[firstPlayer setHP: 0. winner := 2.].]. ] .] .] .] "SecondPlayer Turn. He can choose 5 different move. But, if his skills are passive or in cooldown he cannot use it and the same screen for player 1 will popup again. If attack is chosen SecondPlayer object wil send to the damageCalculation method in Hero class. This method calculate the damage, rreturn it. If he choses health heltah potion num will decrease and his health will increase 250 if there is space, else it will max the hp of the hero. Again in skill part it  calls activateSkill methods in Hero class and make the calculations and effects. Also there is roundEffect which keeps round effects from Hero class again."		ifFalse:[ (firstPlayer setPlayerTurn: 1). chosenItem := UIManager default chooseFrom: secondPlayerAttackList message: 'Player 2 turn ',(secondPlayer getHeroName asString) .	chosenItem = 1 ifTrue:[firstPlayer setHP: ((firstPlayer getHP) - (secondPlayer damageCalculation: firstPlayer) asInteger) . secondPlayer itemRoundEffect: firstPlayer.] 	ifFalse:[ chosenItem = 2 		ifTrue:[secondPlayerHealthPotionNum >0 ifTrue:[((secondPlayer getMaxHP)-(secondPlayer getHP))>=300 ifTrue:[secondPlayer setHP: ((secondPlayer getHP) + 300).] ifFalse:[ secondPlayer setHP: (secondPlayer getMaxHP).].secondPlayerHealthPotionNum := secondPlayerHealthPotionNum -1 . secondPlayer setHealthPotionNum: secondPlayerHealthPotionNum . secondPlayer itemRoundEffect: firstPlayer.] ifFalse:[(firstPlayer setPlayerTurn: 2).] .] ifFalse:[chosenItem = 3 		ifTrue:[secondPlayerManaPotionNum > 0  ifTrue:[((secondPlayer getMaxMana)-(secondPlayer getMana))>=300 ifTrue:[secondPlayer setMana: ((secondPlayer getMana) + 300).] ifFalse:[ secondPlayer setMana: (secondPlayer getMaxMana).].secondPlayerManaPotionNum:=secondPlayerManaPotionNum -1 . secondPlayer setManaPotionNum: secondPlayerManaPotionNum . secondPlayer itemRoundEffect: firstPlayer.] ifFalse:[(firstPlayer setPlayerTurn: 2).] .]  ifFalse:[ chosenItem = 4   		ifTrue:[(secondPlayer getSkillUsable: (secondPlayer getSkillList at:1)) = 1 ifTrue:[secondPlayer activateSkill1: firstPlayer. secondPlayer itemRoundEffect: firstPlayer.] ifFalse:[(firstPlayer setPlayerTurn: 2).].] ifFalse:[ chosenItem = 5 		ifTrue:[(secondPlayer getSkillUsable: (secondPlayer getSkillList at:2)) = 1 ifTrue:[secondPlayer activateSkill2: firstPlayer. secondPlayer itemRoundEffect: firstPlayer.] ifFalse:[(firstPlayer setPlayerTurn: 2).].] ifFalse:[secondPlayer setHP: 0. winner := 1.].]. ] .] .] .] .  Transcript clear.] "If HP of an hero reaches to zero, the game ends as it goes out of the loop"."Determines who is the winner."(firstPlayer getHP)< 0 ifTrue:[(firstPlayer setHP: 0). winner := 2.]ifFalse:[.].(secondPlayer getHP)< 0 ifTrue:[(secondPlayer setHP: 0). winner := 1.]ifFalse:[.]."Last transcript shows the result."Transcript show:'Player1';cr; show:('Hero: ',(firstPlayer getHeroName));cr;show:(firstPlayer getHP asString ,' / ', firstPlayer getMaxHP asString ,' HP');cr;show:(firstPlayer getMana asString, ' / ', firstPlayer getMaxMana asString , ' Mana');cr;show:('Last Action: ', firstPlayer getLastAction );cr;show:('Skills in Cooldown: ' ,firstPlayer getSkillsInCooldown asString);cr;cr;cr;	show:'Player2';cr; show:('Hero: ',(secondPlayer getHeroName));cr;show:(secondPlayer getHP asString ,' / ', secondPlayer getMaxHP asString ,' HP');cr;show:(secondPlayer getMana asString, ' / ', secondPlayer getMaxMana asString , ' Mana');cr;show:('Last Action: ', secondPlayer getLastAction );cr;show:('Skills in Cooldown: ' ,secondPlayer getSkillsInCooldown asString);cr;cr;cr;show:(winner=1 ifTrue:['Player1 (',(firstPlayer getHeroName asString),') is winner of the game!!!!!!'.] 	ifFalse:['Player2 (',(secondPlayer getHeroName asString),') is winner of the game!!!!!!'.]).! !Dota subclass: #Hero	instanceVariableNames: 'maxHP currentHP maxMana currentMana armor itemList damage attack actualDamage skillList lastAction heroName potionList healthPotionNum manaPotionNum skillsInCooldown playerTurn attackList skillEffect skillUsable'	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Hero commentStamp: 'ozmenbrn 5/18/2017 17:42' prior: 0!This class contains 2 class which have 6 heros per class each. Also this class is where calculations are setup and helps GameArena to make able the game play.  Explanation of ActivateSKills , damageCalculation and itemRoundEffect is written detailed inside.!!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:16'!getArmor^armor.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:26'!getDamage^damage.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/16/2017 23:23'!getSkillUsable: skill((skill getRemainingCoolDown = 0) & (skill getActive = 1)) ifTrue:[(skill getManaUse) <= (self getMana) ifTrue: [skillUsable := 1.] ifFalse:[skillUsable := 0.]. ] ifFalse:[skillUsable := 0.].^skillUsable.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:17'!getHP^currentHP.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:19'!setItemList: addNewItemitemList := itemList , {(addNewItem)}.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:19'!setMaxHP: aHPmaxHP := aHP.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 19:13'!setLastAction: varlastAction := var.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 19:13'!getLastAction^lastAction.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 21:08'!getHeroName^heroName.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 19:55'!createInitialSkillListskillList:= #().! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:19'!setMana: aManacurrentMana := aMana.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:18'!setHP: aHPcurrentHP := aHP.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:17'!setArmor: anArmorarmor := anArmor.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 22:31'!getPotionList((self getHealthPotionNum >0) & (self getManaPotionNum >0))ifTrue:[potionList := (self getHealthPotionNum asString),' Health, ', (self getManaPotionNum asString), ' Mana'.]  ifFalse:[(self getHealthPotionNum >0) ifTrue:[potionList := (self getHealthPotionNum asString), ' Health'.] 	ifFalse:[(self getManaPotionNum >0) ifTrue:[potionList := (self getManaPotionNum asString), ' Mana'.] ifFalse:[ potionList := 'None'.] .] .].^potionList.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:45'!getSkillList^skillList.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:17'!getMaxMana^maxMana.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 23:34'!getSkillsInCooldown|list skill1 skill2|list := (self getSkillList).skill1 := list at: 1. skill2 := list at: 2.((skill1 getisCoolDown = 1) & (skill1 getRemainingCoolDown ~= 0) &(skill2 getisCoolDown = 1) & (skill2 getRemainingCoolDown ~= 0))   ifTrue:[skillsInCooldown := ((skill1 asString), ' (not available for ',(skill1 getRemainingCoolDown asString), ' turns), ', (skill2 asString), ' (not available for ',(skill2 getRemainingCoolDown asString), ' turns)').] ifFalse:[((skill1 getisCoolDown = 1) & (skill1 getRemainingCoolDown ~=0)) 	ifTrue:[skillsInCooldown := ((skill1 asString), ' (not available for ',(skill1 getRemainingCoolDown asString), ' turns) ').] ifFalse:[((skill2 getisCoolDown = 1) & (skill2 getRemainingCoolDown ~=0)) 	ifTrue:[skillsInCooldown := ((skill2 asString), ' (not available for ',(skill2 getRemainingCoolDown asString), ' turns) ').] ifFalse:[skillsInCooldown :=  'None'.].].].^skillsInCooldown.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 21:08'!setHeroName: varheroName := var.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/18/2017 17:45'!activateSkill1: enemy|i skill item skillEnemy randomInt|skill := ((self getSkillList) at:1 ).skillEffect := 0.randomInt := ((1 to: 100) atRandom)."If skills have these abilities use it."skill getIsDamage = 1 ifTrue:[skillEffect := (skill getDamage).] ifFalse:[.].skill getIsDecreaseMana = 1 ifTrue:[enemy setMana: (((enemy getMana)/100) asInteger)*(100-(skill getDecreaseManaPercent)).] ifFalse:[.].skill getIsDamageChance = 1 ifTrue:[((1 to: 100) atRandom) < (skill getDamageChance) ifTrue:[skillEffect := (skill getDamage).] ifFalse:[.] .] ifFalse:[.].skill getIsMissingManaAsDamage = 1 ifTrue:[skillEffect := (((enemy getMaxMana)- (enemy getMana))*(skill getMissingManaAsDamage)).] ifFalse:[.].skill getIsMulticast = 1 ifTrue:[ (randomInt < 60) ifTrue:[ skillEffect := (skill getDamage)*2 .] 	ifFalse:[ (randomInt < 85) ifTrue:[ skillEffect := (skill getDamage)*3 .] ifFalse:[ (randomInt < 98) ifTrue:[ skillEffect := (skill getDamage)*4.] ifFalse:[.] .] .] .] ifFalse:[.].skill getIsAnchorSmash = 1 ifTrue:[ skill setIsAnchorSmashActive: 1.] ifFalse:[ .]."Look if enemy has decrease skill damage item or not"i := 1.[ i <= ((enemy getItemList) size) ]whileTrue:[ item := ((enemy getItemList) at:i). i:=i+1. item getIsDecreaseSkillDamagePercent = 1 ifTrue:[skillEffect :=skillEffect - (((skillEffect/100) asInteger) * (item getDecreaseSkillDamagePercent))  .] ifFalse:[.]. ]."Look enemy has something effect this skill"i := 1.[i <= 2]whileTrue: [ skillEnemy := (enemy getSkillList) at:i. i := i + 1. (skillEnemy getActive) = 0 ifTrue:[ (skillEnemy getIsHeal) = 1 ifTrue:[skillEffect :=((skillEffect/100) * (100 - (skillEnemy getHealPercentPerDamage)) asInteger).] ifFalse:[.].] ifFalse:[.].]."Setting lastAction mana usage and remaining and hp of enemy hero."self setLastAction: ((self getSkillList at:1) asString).self setMana: (self getMana) -((self getSkillList at:1) getManaUse).skill setRemainingCoolDown: skill getMaxCoolDown.enemy setHP: (enemy getHP) - (skillEffect asInteger).! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:24'!createInitialItemListitemList:= #().! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:27'!setDamageMin: minDamage setDamageMax:maxDamagedamage :=  {(minDamage) . (maxDamage) }.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/18/2017 17:47'!damageCalculation: enemy|basicDamage i item skill|basicDamage :=  (((self getDamage at:1) to: (self getDamage at:2)) atRandom)."Look item list if effect attack"i := 1.[i <= (self getItemList size)]whileTrue: [ item := (self getItemList) at:i. i := i + 1. item getIsDamage = 1 ifTrue:[basicDamage := basicDamage + (item getDamage).] ifFalse:[.] .]."Look item list if effect attack again"i := 1.[i <= (self getItemList size)]whileTrue: [ item := (self getItemList) at:i. i := i + 1. item getIsDamageChance = 1 ifTrue:[((1 to: 100) atRandom) < (item getDamageChancePercent) ifTrue:[basicDamage := (basicDamage*(item getDamageChance)).]ifFalse:[.].] ifFalse:[.] ]. "Make the calculation with conserning armor."actualDamage := basicDamage *(1- (((6/100)*(enemy getArmor) )/(1 + ((6/100)*(enemy getArmor) )) ) )."Look your skill list if something effect attack"i := 1.[i <= 2]whileTrue: [ skill := (self getSkillList) at:i. i := i + 1. ((skill getIsMultiplDamageChance) = 1) & ((skill getIsMultiplDamage) =1 ) ifTrue:[((1 to: 100) atRandom) < (skill getMultiplDamageChance) ifTrue: [actualDamage := actualDamage*(skill getMultiplDamage) .]ifFalse:[.] .] ifFalse:[.]. 	skill getIsDecreaseMana = 1 ifTrue:[(enemy getMana)>=(skill getDecreaseManaPerAttack) ifTrue:[enemy setMana: ((enemy getMana)-(skill getDecreaseManaPerAttack) ).] ifFalse:[.]  .] ifFalse:[.]  .]."Look enemy skill list if something effect attack"i := 1.[i <= (enemy getItemList size)]whileTrue: [ item := (enemy getItemList) at:i. i := i + 1. 	item getIsEvesionChance = 1 ifTrue:[((1 to: 100) atRandom) < (item getEvesionChance) ifTrue:[ actualDamage := 0.] ifFalse:[.] .] 	ifFalse:[ item getIsDecreaseDamage =1 ifTrue:[((1 to: 100) atRandom) < (item getDecreaseDamageChance) ifTrue:[actualDamage := actualDamage - (item getDecreaseDamage).] ifFalse:[.] .] ifFalse:[.].]. ]. "Look enemy skill list if something effect attack"i := 1.[i <= 2]whileTrue: [ skill := (enemy getSkillList) at:i. i := i + 1. skill getActive = 0 ifTrue:[ skill getIsHeal = 1 ifTrue:[actualDamage :=((actualDamage/100) * (100 - (skill getHealPercentPerDamage)) asInteger).] ifFalse:[.]. skill getIsEvesion = 1 ifTrue:[((1 to: 100) atRandom) < (skill getEvesionChance) ifTrue:[actualDamage := 0.] ifFalse:[.].] ifFalse:[.].] ifFalse:[.]. 	]. "Look enemy has anshor smash or not"skill := (enemy getSkillList) at:1. skill getIsAnchorSmash = 1 ifTrue:[ (skill getIsAnchorSmashActive) = 1 ifTrue:[ actualDamage :=(actualDamage - (((actualDamage /100) *60) asInteger) ).] ifFalse:[.] .] ifFalse:[ .]."Look your skil if it continues. after usage."skill := (self getSkillList) at:2. skill getIsContinueRound = 1 ifTrue:[(skill getContinueRoundRemain) >0 ifTrue:[actualDamage :=( actualDamage*(skill getMultiplDamage) ) .] ifFalse:[.] .] ifFalse:[ .]."set last action"self setLastAction: 'Attack'."return the actual damage to start method."^actualDamage.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/18/2017 17:48'!itemRoundEffect"EMPTY CLASS. Not used."|j tempItem tempSkill|j := 1.[j <= (self getItemList size)]whileTrue: [ tempItem := (self getItemList) at:j. j := j + 1. tempItem getIsManaGivePerRound = 1 ifTrue:[((self getMaxMana)-(self getMana))>= (tempItem getManaGivePerRound) ifTrue:[self setMana: (self getMana) + (tempItem getManaGivePerRound).] ifFalse:[self setMana: (self getMaxMana).] .] ifFalse:[.]. 	tempItem getIsHpGivePerRound = 1 ifTrue:[(self getMaxHP) >= ((self getHP) + (((self getMaxHP)/100)*(tempItem getHpGivePerRound) asInteger)) ifTrue: [self setHP: ((self getHP) + ((((self getMaxHP)/100)*(tempItem getHpGivePerRound) ) asInteger)).] ifFalse:[self setHP:(self getMaxHP) .] .] ifFalse:[.].	].j := 1.[ j <= 2 ]whileTrue:[tempSkill := ((self getSkillList) at:j). j := j + 1. (tempSkill getisCoolDown = 1) & ((tempSkill getRemainingCoolDown) > 0 ) ifTrue:[tempSkill setRemainingCoolDown: ((tempSkill getRemainingCoolDown)- 1 ) .] ifFalse:[.]. (tempSkill getIsPulseNova) = 1 ifTrue:[(tempSkill getIsPulseNovaActive = 1) ifTrue:[ .] ifFalse:[ .] .] ifFalse:[ .]. ].! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:17'!getItemList^itemList.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:44'!setSkillList: addNewItemskillList := skillList , {(addNewItem)}.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/14/2017 21:52'!getPlayerTurn^playerTurn.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:19'!setMaxMana: aManamaxMana := aMana.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/14/2017 21:55'!setPlayerTurn: varvar = 1 ifTrue:[ playerTurn :='Player1 turn!!'.] ifFalse:[ playerTurn := 'Player2 turn!!'.].! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 22:24'!getManaPotionNum^manaPotionNum.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/15/2017 16:06'!setHealthPotionNum: aManaself setLastAction: 'Health Potion'.healthPotionNum := aMana.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:44'!setAttack: initialAttackattack := initialAttack ! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:17'!getMaxHP^maxHP.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/15/2017 16:06'!setManaPotionNum: aManaself setLastAction: 'Mana Potion'.manaPotionNum := aMana.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/18/2017 17:50'!itemRoundEffect: enemy|j tempItem tempSkill skillDamage|skillDamage := 0."Look items if iit gives mana or hp per round. If so, add it."j := 1.[j <= (self getItemList size)]whileTrue: [ tempItem := (self getItemList) at:j. j := j + 1. tempItem getIsManaGivePerRound = 1 ifTrue:[((self getMaxMana)-(self getMana))>= (tempItem getManaGivePerRound) ifTrue:[self setMana: (self getMana) + (tempItem getManaGivePerRound).] ifFalse:[self setMana: (self getMaxMana).] .] ifFalse:[.]. 	tempItem getIsHpGivePerRound = 1 ifTrue:[(self getMaxHP) >= ((self getHP) + (((self getMaxHP)/100)*(tempItem getHpGivePerRound) asInteger)) ifTrue: [self setHP: ((self getHP) + ((((self getMaxHP)/100)*(tempItem getHpGivePerRound) ) asInteger)).] ifFalse:[self setHP:(self getMaxHP) .] .] ifFalse:[.].	]."Look skill list if it has cooldown and if the skill is pulsenova. If so make the calculations."j := 1.[ j <= 2 ]whileTrue:[tempSkill := ((self getSkillList) at:j). j := j + 1. (tempSkill getisCoolDown = 1) & ((tempSkill getRemainingCoolDown) > 0 ) ifTrue:[tempSkill setRemainingCoolDown: ((tempSkill getRemainingCoolDown)- 1 ) .] ifFalse:[.]. (tempSkill getIsPulseNova) = 1 ifTrue:[((tempSkill getIsPulseNovaActive) = 1) ifTrue:[(self getMana)>=150 ifTrue:[skillDamage :=50 . self setMana: ((self getMana) - 150). ] ifFalse:[tempSkill setIsPulseNovaActive: 0.] .] ifFalse:[ .] .] ifFalse:[ .]. ]."Look enemy item list if tit decearses skill damage meke the calculation agains PULSE NOVA."j := 1.[ j <= ((enemy getItemList) size) ]whileTrue:[ tempItem := ((enemy getItemList) at:j). j:=j+1. tempItem getIsDecreaseSkillDamagePercent = 1 ifTrue:[skillDamage :=skillDamage - ((skillDamage/100) * (tempItem getDecreaseSkillDamagePercent))  .] ifFalse:[.]. ]."Look if it is continue to helps the alghrotim of the game."tempSkill := ((self getSkillList) at:2) .tempSkill getIsContinueRound = 1 ifTrue:[ tempSkill getContinueRoundRemain>0 ifTrue:[ tempSkill setContinueRoundRemain: (tempSkill getContinueRoundRemain) - 1 .] ifFalse:[.] .] ifFalse:[ .]."Look enemy skill if he has anchor smash or not."tempSkill := (enemy getSkillList ) at:1. tempSkill getIsAnchorSmash = 1 ifTrue:[tempSkill getIsAnchorSmashActive = 1 ifTrue:[ tempSkill setIsAnchorSmashActive: 0.] ifFalse:[.] .] ifFalse:[ .]."Set the enemy hp."enemy setHP: (enemy getHP) - (skillDamage asInteger).! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/13/2017 22:24'!getHealthPotionNum^healthPotionNum.! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/18/2017 17:45'!activateSkill2: enemy|i skill item skillEnemy|skill := ((self getSkillList) at:2 ).skillEffect := 0."If skills have these abilities use it."skill getIsDamage = 1 ifTrue:[skillEffect := (skill getDamage).] ifFalse:[.].skill getIsDecreaseMana = 1 ifTrue:[enemy setMana: (((enemy getMana)/100) asInteger)*(100-(skill getDecreaseManaPercent)).] ifFalse:[.].skill getIsDamageChance = 1 ifTrue:[((1 to: 100) atRandom) < (skill getDamageChance) ifTrue:[skillEffect := (skill getDamage).] ifFalse:[.] .] ifFalse:[.].skill getIsMissingManaAsDamage = 1 ifTrue:[skillEffect := (((enemy getMaxMana)- (enemy getMana))*(skill getMissingManaAsDamage)).] ifFalse:[.].skill getIsPulseNova = 1 ifTrue:[(skill getIsPulseNovaActive) = 0 ifTrue:[(skill setIsPulseNovaActive: 1) .] ifFalse:[(skill setIsPulseNovaActive: 0).] .] ifFalse:[ .] .skill getIsContinueRound = 1 ifTrue:[ skill setContinueRoundRemain: (skill getContinueRoundMax) .] ifFalse:[ .]."Look if enemy has decrease skill damage item or not"i := 1.[ i <= ((enemy getItemList) size) ]whileTrue:[ item := ((enemy getItemList) at:i). i:=i+1. item getIsDecreaseSkillDamagePercent = 1 ifTrue:[skillEffect :=skillEffect - (((skillEffect/100) asInteger) * (item getDecreaseSkillDamagePercent))  .] ifFalse:[.]. ]."Look enemy has something effect this skill"i := 1.[i <= 2]whileTrue: [ skillEnemy := (enemy getSkillList) at:i. i := i + 1. (skillEnemy getActive) = 0 ifTrue:[ (skillEnemy getIsHeal) = 1 ifTrue:[skillEffect :=((skillEffect/100) * (100 - (skillEnemy getHealPercentPerDamage)) asInteger).] ifFalse:[.].] ifFalse:[.].]."Setting lastAction mana usage and remaining and hp of enemy hero."self setLastAction: ((self getSkillList at:2) asString).self setMana: (self getMana) -((self getSkillList at:2) getManaUse).skill setRemainingCoolDown: skill getMaxCoolDown.enemy setHP: (enemy getHP) - (skillEffect asInteger).! !!Hero methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:44'!getAttack^attack.! !!Hero methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:17'!getMana^currentMana.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hero class	instanceVariableNames: ''!!Hero class methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:11'!createNewHeroInstance^self subclassResponsibility.! !!Hero class methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/27/2017 14:10'!new^self subclassResponsibility.! !Dota subclass: #HeroItems	instanceVariableNames: 'isActive isDamage isMaxHp isMaxMana isMana isHP isChance isDamageChance damageChance damageChancePercent isDamagePerRound damagePerRound isDecreaseArmor decreaseArmor isDecreaseDamage decreaseDamage isDecreaseDamageChance decreaseDamageChance decreaseDamageChancePercent isEvesionChance evesionChance isHpPerRound hpPerRound isManaPerRound manaPerRound isDecreaseSkillDamage decreaseSkillDamage cost damage mana maxHp maxMana hp chance'	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!HeroItems commentStamp: 'ozmenbrn 5/18/2017 17:22' prior: 0!This class contains Item Classes and helps to get its abilities. All the other classes inside have well written instance variables so it can be understood easily without commenting them. !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:33'!getIsDamagePerRound^isDamagePerRound.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:44'!setIsDamageChance: varisDamageChance:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:37'!getDamage^damage.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:39'!setDamageChancePercent: vardamageChancePercent:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:35'!setIsMaxHp: varisMaxHp:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:30'!setIsDecreaseArmor: varisDecreaseArmor:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:41'!setDecreaseSkillDamagePercent: vardecreaseSkillDamage:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:40'!setDecreaseDamage: vardecreaseDamage:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:35'!getActive^isActive.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:39'!setDamagePerRound: vardamagePerRound:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:45'!setIsHpGivePerRound:varisHpPerRound:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:37'!setCost: tcostcost:= tcost.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:46'!setIsGiveMana:varisMana:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:29'!getHpGivePerRound^hpPerRound.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:45'!setIsGiveHp:varisHP:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:34'!getIsEvesionChance^isEvesionChance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:31'!getIsDamageChance^isDamageChance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:51'!setIsManaGivePerRound:varisManaPerRound:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:35'!getMaxHp^maxHp.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:41'!setEvesionChance: varevesionChance:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:26'!getDecreaseSkillDamagePercent^decreaseSkillDamage.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:35'!getIsMaxHp^isMaxHp.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:33'!getMaxMana^maxMana.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:40'!setDecreaseDamageChance: vardecreaseDamageChance:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:36'!setChance: aChancechance := aChance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/16/2017 16:02'!getIsManaGivePerRound^isManaPerRound.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:46'!setGiveMana:varmana:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:34'!setIsMaxMana: varisMaxMana:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:37'!getIsDamage^isDamage.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:25'!getDamageChance^damageChance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:38'!setDamage: sdamagedamage:= sdamage.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:34'!getIsDecreaseSkillDamagePercent^isDecreaseSkillDamage.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:34'!getIsGiveHp^isHP.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:41'!setGiveHp: varhp:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:44'!setIsDamagePerRound:varisDamagePerRound:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:44'!setIsDecreaseDamage:varisDecreaseDamage:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:47'!setManaGivePerRound:varmanaPerRound:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:25'!getDamagePerRound^damagePerRound.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:25'!getDamageChancePercent^damageChancePercent.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:29'!getGiveHp^hp.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:36'!getIsChance^isChance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:33'!getIsDecreaseArmor^isDecreaseArmor.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:25'!getDecreaseArmor^decreaseArmor.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:28'!getEvesionChance^evesionChance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:33'!setMaxMana: varmaxMana:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:39'!setDamageChance: vardamageChance:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:35'!setMaxHp: varmaxHp:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:35'!setActive: booleanExpisActive := booleanExp.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:44'!getIsDecreaseArmor:varisDecreaseArmor:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:45'!setIsEvesionChance:varisEvesionChance:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:24'!getCost^cost.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:36'!getChance^chance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:46'!getGiveMana^mana.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:35'!setIsChance: booleanExpisChance := booleanExp.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:37'!setIsDamage: booleanExpisDamage := booleanExp. ! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:26'!getDecreaseDamage^decreaseDamage.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:40'!setDecreaseArmor: vardecreaseArmor:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:35'!getIsHpGivePerRound^isHpPerRound.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:41'!setHpGivePerRound:varhpPerRound:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:45'!setIsDecreaseSkillDamagePercent:varisDecreaseSkillDamage:= var.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:34'!getIsMaxMana^isMaxMana.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:26'!getDecreaseDamageChance^decreaseDamageChance.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:29'!getManaGivePerRound^manaPerRound.! !!HeroItems methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 20:33'!getIsDecreaseDamage^isDecreaseDamage.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeroItems class	instanceVariableNames: ''!!HeroItems class methodsFor: 'as yet unclassified' stamp: 'cihat 5/5/2017 14:38'!createNewItem^self subclassResponsibility.! !HeroItems subclass: #BattleFury	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!BattleFury commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BattleFury class	instanceVariableNames: ''!!BattleFury class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:58'!createNewItem|tempObject|tempObject := self basicNew.tempObject setCost: 4500.tempObject setActive: 0.tempObject setIsChance: 0.tempObject setIsDamageChance: 0.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsGiveMana: 0.tempObject setIsManaGivePerRound: 1.tempObject setIsDamage: 1.tempObject setDamage: 55.tempObject setManaGivePerRound: 50.^tempObject.! !HeroItems subclass: #ButterFly	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!ButterFly commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ButterFly class	instanceVariableNames: ''!!ButterFly class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:58'!createNewItem|tempObject|tempObject := self basicNew.tempObject setCost: 5500.tempObject setActive: 0.tempObject setIsChance: 0.tempObject setIsDamageChance: 0.tempObject setIsGiveMana: 0.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 1.tempObject setIsGiveHp: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsDamage: 1.tempObject setDamage: 30.tempObject setEvesionChance: 25.^tempObject.! !HeroItems subclass: #Daedalus	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Daedalus commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Daedalus class	instanceVariableNames: ''!!Daedalus class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:59'!createNewItem|tempObject|tempObject := self basicNew.tempObject setCost: 5500.tempObject setActive: 0.tempObject setIsGiveMana: 0.tempObject setIsChance: 0.tempObject setIsDamageChance: 1.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsGiveHp: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsDamage: 1.tempObject setDamage: 75.tempObject setDamageChance: 2.tempObject setDamageChancePercent: 25.^tempObject.! !HeroItems subclass: #DefianceOfHood	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!DefianceOfHood commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DefianceOfHood class	instanceVariableNames: ''!!DefianceOfHood class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/19/2017 13:19'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsChance: 0.tempObject setCost: 2000.tempObject setIsDamageChance: 0.tempObject setIsGiveMana: 0.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 1.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 0.tempObject setIsDamage: 0.tempObject setDecreaseSkillDamagePercent: 25.^tempObject.! !HeroItems subclass: #Desolator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Desolator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Desolator class	instanceVariableNames: ''!!Desolator class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 22:00'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsChance: 0.tempObject setCost: 4000.tempObject setIsDamageChance: 0.tempObject setIsGiveMana: 0.tempObject setIsDamagePerRound: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsDecreaseArmor: 1.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsDamage: 1.tempObject setDamage: 50.tempObject setDecreaseArmor: 5.^tempObject.! !HeroItems subclass: #EnergyBooster	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!EnergyBooster commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnergyBooster class	instanceVariableNames: ''!!EnergyBooster class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 22:00'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsChance: 0.tempObject setCost: 1100.tempObject setIsDamageChance: 0.tempObject setIsGiveMana: 0.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 1.tempObject setIsDamage: 0.tempObject setMaxMana: 250.^tempObject.! !HeroItems subclass: #HealthPotion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!HealthPotion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HealthPotion class	instanceVariableNames: ''!!HealthPotion class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 22:00'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsChance: 0.tempObject setCost: 200.tempObject setIsDamageChance: 0.tempObject setIsDamagePerRound: 0.tempObject setIsGiveMana: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 1.tempObject setIsHpGivePerRound: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 0.tempObject setIsDamage: 0.tempObject setGiveHp: 300.^tempObject.! !HeroItems subclass: #HeartofTarrasque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!HeartofTarrasque commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeartofTarrasque class	instanceVariableNames: ''!!HeartofTarrasque class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 22:00'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsChance: 0.tempObject setIsDamageChance: 0.tempObject setCost: 5600.tempObject setIsDamagePerRound: 0.tempObject setIsGiveMana: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsHpGivePerRound: 1.tempObject setIsManaGivePerRound: 0.tempObject setIsMaxHp: 1.tempObject setIsMaxMana: 0.tempObject setIsDamage: 0.tempObject setHpGivePerRound: 7.tempObject setMaxHp: 250.^tempObject.! !HeroItems subclass: #ManaPotion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!ManaPotion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaPotion class	instanceVariableNames: ''!!ManaPotion class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:59'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsChance: 0.tempObject setIsDamageChance: 0.tempObject setCost: 200.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsGiveMana: 1.tempObject setIsManaGivePerRound: 0.tempObject setIsMaxHp: 0.tempObject setIsMaxMana: 0.tempObject setIsDamage: 0.tempObject setGiveMana: 300.^tempObject.! !Dota subclass: #Player1	instanceVariableNames: 'hero hp mana lastAction remainingPotions skillsCooldown isStuned itemList skillList'	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Player1 commentStamp: 'ozmenbrn 5/18/2017 17:22' prior: 0!Empty class before part1!!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:46'!setItemList: itemsitemList := items! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:54'!setSkillList: skillsskillList := skills! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:40'!getRemaningPotions^self! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:40'!setLastAction: finalActionlastAction := finalAction ! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:41'!setRemaningPotions: potionsremainingPotions := potions! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:40'!getLastAction^self! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:41'!setSkillsCooldown: skillsskillsCooldown := skills! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:39'!setHp: initialHphp := initialHp ! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:42'!getSkillsCooldown^self! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:54'!getSkillList^self! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:39'!setHero: heroNamehero := heroName! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:38'!getHp^self! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:45'!getItemList^self! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:40'!setMana: initialManamana := initialMana ! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:39'!getHero^self! !!Player1 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:39'!getMana^self! !Dota subclass: #Player2	instanceVariableNames: 'hero hp mana lastAction remainingPotions skillsCooldown isStuned itemList skillList'	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Player2 commentStamp: 'ozmenbrn 5/18/2017 17:22' prior: 0!Empty class before part1!!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:55'!setSkillList: skillsskillList := skills! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:55'!setItemList: itemsitemList := items! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:43'!getRemaningPotions^self! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:44'!setLastAction: finalActionlastAction := finalAction ! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:44'!setRemaningPotions: potionsremainingPotions := potions! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:43'!getLastAction^self! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:44'!setSkillsCooldown: skillsskillsCooldown := skills! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:43'!getSkillsCooldown^self! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:43'!setHp: initialHphp := initialHp ! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:55'!getSkillList^self! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:43'!setHero: heroNamehero := heroName! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:42'!getHp^self! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:55'!getItemList^self! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:44'!setMana: initialManamana := initialMana ! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:42'!getHero^self! !!Player2 methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 4/27/2017 23:43'!getMana^self! !Hero subclass: #Scourge	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Scourge commentStamp: 'ozmenbrn 5/18/2017 17:22' prior: 0!All the other hero classes inside have well written instance variables so it can be understood easily without commenting them. !Scourge subclass: #Leshrac	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Leshrac commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Leshrac class	instanceVariableNames: ''!!Leshrac class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:50'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 1518.tempObject setHP: 1518.tempObject setMaxMana: 1534.tempObject setMana: 1534.tempObject setArmor: 12.tempObject setDamageMin: 133 setDamageMax: 137.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Scourge subclass: #Lion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Lion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Lion class	instanceVariableNames: ''!!Lion class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:50'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 1609.tempObject setHP: 1609.tempObject setMaxMana: 1456.tempObject setMana: 1456.tempObject setArmor: 9.tempObject setDamageMin: 139 setDamageMax: 145.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Scourge subclass: #Mortred	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Mortred commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mortred class	instanceVariableNames: ''!!Mortred class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:50'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 1754.tempObject setHP: 1754.tempObject setMaxMana: 892.tempObject setMana: 892.tempObject setArmor: 18.tempObject setDamageMin: 142 setDamageMax: 144.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Scourge subclass: #NyxAssassin	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!NyxAssassin commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NyxAssassin class	instanceVariableNames: ''!!NyxAssassin class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:50'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 1784.tempObject setHP: 1784.tempObject setMaxMana: 1149.tempObject setMana: 1149.tempObject setArmor: 14.tempObject setDamageMin: 122 setDamageMax: 126.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Hero subclass: #Sentinel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Sentinel commentStamp: 'ozmenbrn 5/18/2017 17:22' prior: 0!All the other hero classes inside have well written instance variables so it can be understood easily without commenting them. !Sentinel subclass: #Earthshaker	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Earthshaker commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Earthshaker class	instanceVariableNames: ''!!Earthshaker class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:51'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 2270.tempObject setHP: 2270.tempObject setMaxMana: 1030.tempObject setMana: 1030.tempObject setArmor: 10.tempObject setDamageMin: 136 setDamageMax: 146.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Sentinel subclass: #Magina	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Magina commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Magina class	instanceVariableNames: ''!!Magina class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:51'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 1495.tempObject setHP: 1495.tempObject setMaxMana: 1017.tempObject setMana: 1017.tempObject setArmor: 14.tempObject setDamageMin: 136 setDamageMax: 140.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Sentinel subclass: #Mirana	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Mirana commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mirana class	instanceVariableNames: ''!!Mirana class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:51'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 1697.tempObject setHP: 1697.tempObject setMaxMana: 996.tempObject setMana: 996.tempObject setArmor: 16.tempObject setDamageMin: 137 setDamageMax: 148.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Sentinel subclass: #OgreMagi	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!OgreMagi commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OgreMagi class	instanceVariableNames: ''!!OgreMagi class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:51'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 2426.tempObject setHP: 2426.tempObject setMaxMana: 1105.tempObject setMana: 1105.tempObject setArmor: 16.tempObject setDamageMin: 126 setDamageMax: 132.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Sentinel subclass: #Rylai	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Rylai commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rylai class	instanceVariableNames: ''!!Rylai class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:51'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 1609.tempObject setHP: 1609.tempObject setMaxMana: 1373.tempObject setMana: 1373.tempObject setArmor: 9.tempObject setDamageMin: 125 setDamageMax: 131.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Scourge subclass: #SkeletonKing	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!SkeletonKing commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SkeletonKing class	instanceVariableNames: ''!!SkeletonKing class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:50'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 2270.tempObject setHP: 2270.tempObject setMaxMana: 993.tempObject setMana: 993.tempObject setArmor: 11.tempObject setDamageMin: 151 setDamageMax: 153.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Dota subclass: #Skills	instanceVariableNames: 'isActive isManaUse manaUse isCoolDown maxCoolDown remainingCoolDown isDamage damage isHeal healPercentPerDamage isDecreaseEnemyAttack decreaseEnemyAttackPercent isContinueRound continueRoundMax continueRoundRemain isMultiplDamage multiplDamage isDecreaseMana decreaseManaPerAttack decreaseManaPercent isEvesion evesionChance isMultiplDamageChance multiplDamageChance isDamageChance damageChance isMissingManaAsDamage missingManaAsDamage isManaUsePerRound manaUsePerRound isDamageEachRound damageEachRound isMulticast isPulseNova isPulseNovaActive isAnchorSmash isAnchorSmashActive'	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Skills commentStamp: 'ozmenbrn 5/18/2017 17:21' prior: 0!This class contains the skill classes and helps to get its abilities. All the other classes inside have well written instance variables so it can be understood easily without commenting them. !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:29'!getDecreaseManaPercent^decreaseManaPercent.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:24'!getIsHeal^isHeal.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:18'!setActive: varisActive := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:29'!getIsEvesion^isEvesion.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 17:17'!getIsPulseNova^isPulseNova.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:33'!getDamageEachRound^damageEachRound.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 16:57'!setIsMulticast: varisMulticast := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:17'!getActive^isActive.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 00:23'!getMaxCoolDown^maxCoolDown.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:29'!setDecreaseManaPercent: vardecreaseManaPercent := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:30'!getIsMultiplDamageChance^isMultiplDamageChance.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:23'!setRemainingCoolDown: varremainingCoolDown := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:22'!getisCoolDown^isCoolDown.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:21'!getisManaUse^isManaUse.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:26'!getIsContinueRound^isContinueRound.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:27'!getContinueRoundMax^continueRoundMax.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:33'!getIsDamageEachRound^isDamageEachRound.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:28'!getIsDecreaseMana^isDecreaseMana.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:33'!getIsAnchorSmashActive^isAnchorSmashActive.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:28'!setMultiplDamage: varmultiplDamage := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:28'!setIsMultiplDamage: varisMultiplDamage := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:24'!getDamage^damage.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:32'!getIsMissingManaAsDamage^isMissingManaAsDamage.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:29'!setDecreaseManaPerAttack: vardecreaseManaPerAttack := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:32'!setIsManaUsePerRound: varisManaUsePerRound := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:26'!getDecreaseEnemyAttackPercent^decreaseEnemyAttackPercent.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:24'!setIsHeal: varisHeal := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:27'!getIsContinueRoundRemain^continueRoundRemain.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:33'!setDamageEachRound: vardamageEachRound := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 17:16'!setIsPulseNovaActive: varisPulseNovaActive := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:25'!setIsDecreaseEnemyAttack: varisDecreaseEnemyAttack := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:31'!setDamageChance: vardamageChance := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:28'!setIsDecreaseMana: varisDecreaseMana := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:22'!setManaUse: varmanaUse := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:31'!getMultiplDamageChance^multiplDamageChance.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:30'!getEvesionChance^evesionChance.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 17:17'!getIsPulseNovaActive^isPulseNovaActive.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:31'!getIsDamageChance^isDamageChance.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:24'!setDamage: vardamage := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:27'!setIsContinueRound: varisContinueRound := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:23'!getmaxCoolDown^maxCoolDown.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:27'!setContinueRoundMax: varcontinueRoundMax := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:23'!getRemainingCoolDown^remainingCoolDown.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/12/2017 14:34'!setIsManaUse: varisManaUse := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:32'!setIsMissingManaAsDamage: varisMissingManaAsDamage := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/12/2017 14:34'!setIsCoolDown: varisCoolDown := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:31'!getDamageChance^damageChance.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:26'!setDecreaseEnemyAttackPercent: vardecreaseEnemyAttackPercent := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:30'!setEvesionChance: varevesionChance := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/12/2017 15:14'!getMissingManaAsDamage^missingManaAsDamage.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 20:34'!setIsAnchorSmashActive: varisAnchorSmashActive:= var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:25'!getHealPercentPerDamage^healPercentPerDamage.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:32'!getManaUsePerRound^manaUsePerRound.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:29'!getDecreaseManaPerAttack^decreaseManaPerAttack.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:25'!setHealPercentPerDamage: varhealPercentPerDamage := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:31'!setIsDamageChance: varisDamageChance := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:33'!setIsDamageEachRound: varisDamageEachRound := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/12/2017 14:33'!setMaxCoolDown: varmaxCoolDown := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:24'!setIsDamage: varisDamage := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:29'!setIsAnchorSmash: varisAnchorSmash:= var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:25'!getIsDecreaseEnemyAttack^isDecreaseEnemyAttack.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:21'!getManaUse^manaUse.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:28'!getMultiplDamage^multiplDamage.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:29'!getIsAnchorSmash^isAnchorSmash.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:31'!setMultiplDamageChance: varmultiplDamageChance := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:23'!getIsDamage^isDamage.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:30'!setIsMultiplDamageChance: varisMultiplDamageChance := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:33'!setManaUsePerRound: varmanaUsePerRound := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:30'!setIsEvesion: varisEvesion := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:27'!setContinueRoundRemain: varcontinueRoundRemain := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:32'!getIsManaUsePerRound^isManaUsePerRound.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 16:28'!getIsMultiplDamage^isMultiplDamage.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 17:17'!setIsPulseNova: varisPulseNova := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/12/2017 15:14'!setMissingManaAsDamage: varmissingManaAsDamage := var.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:10'!getContinueRoundRemain^continueRoundRemain.! !!Skills methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 16:57'!getIsMulticast^isMulticast.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Skills class	instanceVariableNames: ''!!Skills class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:52'!createNewSkill^self subclassResponsibility.! !Skills subclass: #AnchorSmash	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!AnchorSmash commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnchorSmash class	instanceVariableNames: ''!!AnchorSmash class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:34'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 1.tempObject setIsPulseNova: 0.tempObject setIsHeal: 0.tempObject setIsAnchorSmash: 1.tempObject setIsDecreaseEnemyAttack: 1. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setIsMulticast: 0.tempObject setIsPulseNova: 0.tempObject setDamage: 225.tempObject setManaUse: 60.tempObject setMaxCoolDown: 3.tempObject setRemainingCoolDown: 0.tempObject setIsAnchorSmashActive: 0.tempObject setDecreaseEnemyAttackPercent: 60.^tempObject.! !Skills subclass: #Blur	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Blur commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Blur class	instanceVariableNames: ''!!Blur class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsManaUse: 0. tempObject setIsMulticast: 0.tempObject setIsCoolDown: 0.tempObject setIsDamage: 0.tempObject setIsPulseNova: 0.tempObject setIsAnchorSmash: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 1.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setEvesionChance: 40.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #CoupdeGrace	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!CoupdeGrace commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CoupdeGrace class	instanceVariableNames: ''!!CoupdeGrace class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsManaUse: 0. tempObject setIsMulticast: 0.tempObject setIsCoolDown: 0.tempObject setIsDamage: 0.tempObject setIsHeal: 0.tempObject setIsAnchorSmash: 0.tempObject setIsPulseNova: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 1.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 1.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setMultiplDamageChance: 15.tempObject setRemainingCoolDown: 0.tempObject setMultiplDamage: 4.^tempObject.! !Skills subclass: #EarthSpike	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!EarthSpike commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EarthSpike class	instanceVariableNames: ''!!EarthSpike class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsDamage: 1.tempObject setIsHeal: 0.tempObject setIsAnchorSmash: 0.tempObject setIsPulseNova: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 260.tempObject setManaUse: 160.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #EnchantTotem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!EnchantTotem commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnchantTotem class	instanceVariableNames: ''!!EnchantTotem class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 0.tempObject setIsPulseNova: 0.tempObject setIsMulticast: 0.tempObject setIsAnchorSmash: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 1.tempObject setIsMultiplDamage: 1.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setContinueRoundMax: 2.tempObject setContinueRoundRemain: 0.tempObject setManaUse: 50.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.tempObject setMultiplDamage: 4.^tempObject.! !Skills subclass: #FingerofDeath	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!FingerofDeath commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FingerofDeath class	instanceVariableNames: ''!!FingerofDeath class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 1.tempObject setIsPulseNova: 0.tempObject setIsAnchorSmash: 0.tempObject setIsMulticast: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 850.tempObject setManaUse: 650.tempObject setMaxCoolDown: 8.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #Fireblast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Fireblast commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fireblast class	instanceVariableNames: ''!!Fireblast class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:53'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 1.tempObject setIsPulseNova: 0.tempObject setIsMulticast: 1.tempObject setIsAnchorSmash: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 1.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 220.tempObject setManaUse: 225.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.tempObject setMultiplDamage: 1.tempObject setMultiplDamageChance: 60.^tempObject.! !Skills subclass: #Fissure	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Fissure commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fissure class	instanceVariableNames: ''!!Fissure class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 1.tempObject setIsPulseNova: 0.tempObject setIsMulticast: 0.tempObject setIsHeal: 0.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 260.tempObject setManaUse: 170.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #FreezingField	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!FreezingField commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreezingField class	instanceVariableNames: ''!!FreezingField class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 1.tempObject setIsPulseNova: 0.tempObject setIsMulticast: 0.tempObject setIsAnchorSmash: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 800.tempObject setManaUse: 600.tempObject setMaxCoolDown: 8.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #FrostBite	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!FrostBite commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FrostBite class	instanceVariableNames: ''!!FrostBite class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsPulseNova: 0.tempObject setIsDamage: 1.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 300.tempObject setManaUse: 150.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #GodsStrength	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!GodsStrength commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GodsStrength class	instanceVariableNames: ''!!GodsStrength class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsPulseNova: 0.tempObject setIsDamage: 0.tempObject setIsHeal: 0.tempObject setIsMulticast: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 1.tempObject setIsAnchorSmash: 0.tempObject setIsMultiplDamage: 1.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setMultiplDamage: 2.tempObject setContinueRoundMax: 4.tempObject setContinueRoundRemain: 0.tempObject setManaUse: 200.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #Impale	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Impale commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Impale class	instanceVariableNames: ''!!Impale class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:32'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 1.tempObject setIsMulticast: 0.tempObject setIsPulseNova: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsAnchorSmash: 0.tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 260.tempObject setManaUse: 225.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #ManaBreak	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!ManaBreak commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaBreak class	instanceVariableNames: ''!!ManaBreak class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:31'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsManaUse: 0. tempObject setIsCoolDown: 0.tempObject setIsDamage: 0.tempObject setIsMulticast: 0.tempObject setIsHeal: 0.tempObject setIsPulseNova: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsAnchorSmash: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 1. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setRemainingCoolDown: 0.tempObject setDecreaseManaPerAttack: 100.^tempObject.! !Skills subclass: #ManaBurn	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!ManaBurn commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaBurn class	instanceVariableNames: ''!!ManaBurn class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:31'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 0.tempObject setIsMulticast: 0.tempObject setIsHeal: 0.tempObject setIsPulseNova: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseMana: 1. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDecreaseManaPercent: 20.tempObject setManaUse: 50.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #ManaVoid	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!ManaVoid commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaVoid class	instanceVariableNames: ''!!ManaVoid class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:31'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsPulseNova: 0.tempObject setIsDamage: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 1.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setMissingManaAsDamage: 11/10.tempObject setManaUse: 275.tempObject setMaxCoolDown: 7.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #Multicast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Multicast commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Multicast class	instanceVariableNames: ''!!Multicast class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:55'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsManaUse: 0. tempObject setIsCoolDown: 0.tempObject setIsDamage: 0.tempObject setIsPulseNova: 0.tempObject setIsMulticast: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 1.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setMultiplDamage: 4.tempObject setRemainingCoolDown: 0.tempObject setMultiplDamageChance: 125/10.^tempObject.! !Skills subclass: #PulseNova	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!PulseNova commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PulseNova class	instanceVariableNames: ''!!PulseNova class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsDamage: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsPulseNova: 1.tempObject setIsPulseNovaActive: 0.tempObject setIsManaUsePerRound: 1.tempObject setIsDamageEachRound: 1.tempObject setManaUsePerRound: 150.tempObject setManaUse: 0.tempObject setRemainingCoolDown: 0.tempObject setMaxCoolDown: 0.tempObject setDamageEachRound: 50.^tempObject.! !Skills subclass: #Ravage	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Ravage commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ravage class	instanceVariableNames: ''!!Ravage class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsDamage: 1.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsPulseNova: 0.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 380.tempObject setManaUse: 325.tempObject setMaxCoolDown: 8.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #SacredArrow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!SacredArrow commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SacredArrow class	instanceVariableNames: ''!!SacredArrow class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsDamage: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsPulseNova: 0.tempObject setIsAnchorSmash: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 1.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 320.tempObject setManaUse: 100.tempObject setMaxCoolDown: 4.tempObject setRemainingCoolDown: 0.tempObject setDamageChance: 75.^tempObject.! !Skills subclass: #SplitEarth	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!SplitEarth commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SplitEarth class	instanceVariableNames: ''!!SplitEarth class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsDamage: 1.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsPulseNova: 0.tempObject setIsDecreaseMana: 0. tempObject setIsAnchorSmash: 0.tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 300.tempObject setManaUse: 160.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #Starstorm	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Starstorm commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Starstorm class	instanceVariableNames: ''!!Starstorm class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsDamage: 1.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0.tempObject setIsPulseNova: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsAnchorSmash: 0.tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 300.tempObject setManaUse: 160.tempObject setMaxCoolDown: 4.tempObject setRemainingCoolDown: 0.^tempObject.! !Skills subclass: #StormHammer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!StormHammer commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StormHammer class	instanceVariableNames: ''!!StormHammer class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsMulticast: 0.tempObject setIsDamage: 1.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsPulseNova: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsAnchorSmash: 0.tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setDamage: 325.tempObject setManaUse: 140.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !Sentinel subclass: #Sven	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Sven commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sven class	instanceVariableNames: ''!!Sven class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:51'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 2198.tempObject setHP: 2198.tempObject setMaxMana: 874.tempObject setMana: 874.tempObject setArmor: 14.tempObject setDamageMin: 149 setDamageMax: 151.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Scourge subclass: #Tidehunter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Tidehunter commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tidehunter class	instanceVariableNames: ''!!Tidehunter class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/11/2017 15:50'!createNewHeroInstance|tempObject|tempObject := self basicNew.tempObject setMaxHP: 2316.tempObject setHP: 2316.tempObject setMaxMana: 998.tempObject setMana: 998.tempObject setArmor: 11.tempObject setDamageMin: 139 setDamageMax: 145.tempObject createInitialItemList.tempObject createInitialSkillList.^tempObject.! !Skills subclass: #VampiricAura	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!VampiricAura commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VampiricAura class	instanceVariableNames: ''!!VampiricAura class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsManaUse: 0. tempObject setIsCoolDown: 0.tempObject setIsMulticast: 0.tempObject setIsDamage: 0.tempObject setIsHeal: 1.tempObject setIsDecreaseEnemyAttack: 0.tempObject setIsPulseNova: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsAnchorSmash: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setHealPercentPerDamage: 15.tempObject setRemainingCoolDown: 0.^tempObject.! !HeroItems subclass: #Vanguard	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!Vanguard commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vanguard class	instanceVariableNames: ''!!Vanguard class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:59'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setIsChance: 0.tempObject setCost: 2500.tempObject setIsDamageChance: 0.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 1.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsMaxHp: 1.tempObject setIsMaxMana: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsGiveMana: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsDamage: 0.tempObject setMaxHp: 250.tempObject setDecreaseDamage: 60.tempObject setDecreaseDamageChance: 20.^tempObject.! !HeroItems subclass: #VitalyBooster	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!VitalyBooster commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VitalyBooster class	instanceVariableNames: ''!!VitalyBooster class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/9/2017 21:59'!createNewItem|tempObject|tempObject := self basicNew.tempObject setActive: 0.tempObject setCost: 1200.tempObject setIsChance: 0.tempObject setIsDamageChance: 0.tempObject setIsDamagePerRound: 0.tempObject setIsDecreaseDamage: 0.tempObject setIsDecreaseArmor: 0.tempObject setIsDecreaseSkillDamagePercent: 0.tempObject setIsEvesionChance: 0.tempObject setIsGiveHp: 0.tempObject setIsMaxHp: 1.tempObject setIsMaxMana: 0.tempObject setIsHpGivePerRound: 0.tempObject setIsGiveMana: 0.tempObject setIsManaGivePerRound: 0.tempObject setIsDamage: 0.tempObject setMaxHp: 250.^tempObject.! !Skills subclass: #WraithfireBlast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400045'!!WraithfireBlast commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WraithfireBlast class	instanceVariableNames: ''!!WraithfireBlast class methodsFor: 'as yet unclassified' stamp: 'ozmenbrn 5/17/2017 18:30'!createNewSkill|tempObject|tempObject := self basicNew.tempObject setActive: 1.tempObject setIsManaUse: 1. tempObject setIsCoolDown: 1.tempObject setIsDamage: 1.tempObject setIsMulticast: 0.tempObject setIsHeal: 0.tempObject setIsDecreaseEnemyAttack: 0. tempObject setIsContinueRound: 0.tempObject setIsMultiplDamage: 0.tempObject setIsPulseNova: 0.tempObject setIsDecreaseMana: 0. tempObject setIsEvesion: 0.tempObject setIsMultiplDamageChance: 0.tempObject setIsDamageChance: 0.tempObject setIsMissingManaAsDamage: 0.tempObject setIsManaUsePerRound: 0.tempObject setIsDamageEachRound: 0.tempObject setIsAnchorSmash: 0.tempObject setDamage: 300.tempObject setManaUse: 140.tempObject setMaxCoolDown: 5.tempObject setRemainingCoolDown: 0.^tempObject.! !